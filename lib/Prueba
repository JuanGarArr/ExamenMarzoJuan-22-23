-----DATA-----
***DataRepository
public class *****DataRepository implements  *****Repository {

    private ContactLocalDataSource localDataSource;

    public *****DataRepository(*****LocalDataSource localDataSource) {
        this.localDataSource = localDataSource;
    }

(ERn el override hay que a√±adir el return this.****FileLocalDataSource.save/find/ deletes)

-----Domain/UseCase-----
ADD/DELETE/BUSCAR
	private ******Repository +*****Repository;

        public void Add/Delete/Search******UseCase(******Repository +******Repository) {
            this.+*****Repository = +*****Repository;
        }

        public void execute(****** +*****) {
            +*****Repository.save/delete/findById-all(+*****/id);
        }
GET
	"Lo mismo que el anterior"

	public List<*****> execute(){
        return this.+****Repository.getAll();
    }

****REPOSITORY
    public void save(***** +****);

    public void delete(Integer +***Id);

    public ***** findById(Integer +***Id);

    public List<*****> getAll();
	List<Cat> getAllWithRemote();

-----PRESENTATION-----
New***Form
	private Cat buildCat() {
        Cat cat = new Cat();
        cat.setId(1);
        cat.setName("Tux");
        cat.setDateBorn("20/09/2015");
        cat.setSex("macho");
        cat.setHasVirus(false);

        return cat;
    }

    private void saveCat(Cat cat) {
        AddCatUseCase addCatUseCase = new AddCatUseCase(new CatDataRepository(CatFileLocalDataSource.getInstance()));
        addCatUseCase.execute(cat);
    }

	public void createNewCat() {
        Cat cat = buildCat();
        saveCat(cat);
    }


Delete***Form
	 public void deleteCat(Integer catId) {
        DeleteCatUseCase deleteCatUseCase = new DeleteCatUseCase(new CatDataRepository(CatFileLocalDataSource.getInstance()));
        deleteCatUseCase.execute(catId);
Print***View
	public void print() {
        GetCatsUseCase useCase = new GetCatsUseCase(new CatDataRepository(CatFileLocalDataSource.getInstance()));
        List<Cat> cats = useCase.execute();
        for (Cat cat : cats) {
            System.out.println(cat.toString());
        }
    }

    public void printWithRemote() {
        GetCatsUseCase useCase = new GetCatsUseCase(
                new CatDataRepository(CatFileLocalDataSource.getInstance(), new CatApiRemoteDataSource()));

        List<Cat> cats = useCase.execute();

        for (Cat cat : cats) {
            System.out.println(cat.toString());
        }
    }

-----MenuView-----
public void init() {
       // createNewCatForm();
       // deleteNewCatForm();
        // showCats();
        // showCatsFromRemote();
        // createNewPeople();
        //createNewAdoption();
        // showAdoptions();
    }

    private void createNewCatForm() {
        NewCatForm newCatForm = new NewCatForm();
        newCatForm.createNewCat();
    }

    private void deleteNewCatForm() {
        DeleteCatForm deleteCatForm = new DeleteCatForm();
        deleteCatForm.deleteCat(1);
    }

    private void showCats() {
        PrintCatsView printCatsView = new PrintCatsView();
        printCatsView.print();
    }

    private void showCatsFromRemote() {
        PrintCatsView printCatsView = new PrintCatsView();
        printCatsView.printWithRemote();
    }

    private void createNewPeople() {
        NewPersonForm newPersonForm = new NewPersonForm();
        newPersonForm.createNewPerson();
    }

    private void createNewAdoption() {
        NewAdoptionForm newAdoptionForm = new NewAdoptionForm();
        newAdoptionForm.createNewAdoption();
    }

    private void showAdoptions() {
        PrintAdoptionsView printAdoptionsView = new PrintAdoptionsView();
        printAdoptionsView.print();
    }

-----MAIN-----

public static void main(String args[]) {
        TerminalView terminalView = new TerminalView();
        terminalView.init();
    }



----SINGLETON-----

private static ***FileLocalDataSource instance = null;

public static ***FileLocalDataSource getInstance() {
        if (instance == null) {
            instance = new ***FileLocalDataSource();
        }
        return instance;
    }